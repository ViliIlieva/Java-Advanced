import java.util.Arrays;
import java.util.Scanner;

public class Armory02 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int n = Integer.parseInt(scanner.nextLine());
        int currentRow = 0;
        int currentCol = 0;
        String[][] matrix = new String[n][n];
        for (int row = 0; row < n; row++) {
            String[] input = scanner.nextLine().split("");
            for (int col = 0; col < n; col++) {
                matrix[row][col] = input[col];
                if (input[col].equals("A")) {
                    currentRow = row;
                    currentCol = col;
                }
            }
        }
        int gold = 65;
        boolean breakAndPrint = false;
        int newPositionRow = 0;
        int newPositionCol = 0;

        while (true) {
            String command = scanner.nextLine();

            switch (command) {
                case "up":
                    newPositionRow = currentRow - 1;
                    newPositionCol = currentCol;
                    break;
                case "down":
                    newPositionRow = currentRow + 1;
                    newPositionCol = currentCol;
                    break;
                case "left":
                    newPositionRow = currentRow;
                    newPositionCol = currentCol - 1;
                    break;
                case "right":
                    newPositionRow = currentRow;
                    newPositionCol = currentCol + 1;
                    break;
            }
            if (isValidIndex(newPositionRow, newPositionCol, n)) {
                if (matrix[newPositionRow][newPositionCol].matches("[0-9]")) {
                    int price = Integer.parseInt(matrix[newPositionRow][newPositionCol]);
                    gold = gold - price;
                    matrix[currentRow][currentCol] = "-";
                    matrix[newPositionRow][newPositionCol] = "A";
                    currentRow = newPositionRow;
                    currentCol = newPositionCol;

                    if (!priceCheck(gold)) {
                        System.out.println("Very nice swords, I will come back for more!");
                        breakAndPrint = true;
                        break;
                    }
                    if(breakAndPrint){
                        break;
                    }
                }else if(matrix[newPositionRow][newPositionCol].equals("M")){
                    matrix[currentRow][currentCol] = "-";
                    matrix[newPositionRow][newPositionCol] = "-";
                    int[]mirrorPosition = findMirror(matrix);
                    matrix[mirrorPosition[0]][mirrorPosition[1]] = "A";
                    currentRow = mirrorPosition[0];
                    currentCol = mirrorPosition[1];

                }else if(matrix[newPositionRow][newPositionCol].equals("-")){
                    matrix[currentRow][currentCol] = "-";
                    matrix[newPositionRow][newPositionCol] = "A";
                    currentRow = newPositionRow;
                    currentCol = newPositionCol;
                }
            } else if (!isValidIndex(newPositionRow, newPositionCol, n)) {
                System.out.println("I do not need more swords!");
                matrix[currentRow][currentCol] = "-";
                break;
            }
        }
        System.out.printf("The king paid %s gold coins. %n", 65-gold);
        printMatrix(matrix);
    }
    private static int [] findMirror(String matrix[][]) {
        int [] mirrorPosition = new int[2];
        for (int row = 0; row < matrix.length; row++) {
            for (int col = 0; col < matrix[row].length; col++) {
                 if (matrix[row][col].equals("M")) {
                    mirrorPosition[0] = row;
                    mirrorPosition[1] = col;
                }
            }
        }
        return mirrorPosition;
    }
    public static void printMatrix(String matrix[][]){
        for (int row = 0; row < matrix.length; row++) {
            for (int col = 0; col < matrix.length; col++) {
                System.out.print(matrix[row][col]);
            }
            System.out.println();
        }
    }
    public static boolean isValidIndex(int row, int col, int n) {
        if (row >= n || row < 0 || col >= n || col < 0) {
            return false;
        }
        return true;
    }

    public static boolean priceCheck(int price) {
        if (price <= 0) {
            return false;
        }
        return true;
    }

}
