import java.util.Scanner;

public class CookingJourney02 {
    private  static int row = 0;
    private  static int col = 0;
    private  static int sum = 0;
    private static boolean outOfMatrix = false;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int n = Integer.parseInt(scanner.nextLine());
        String [][] matrix = new String[n][n];
        int [] pillarPosition = new int[2];

//fill matrix
        for (int i = 0; i < n; i++) {
            String [] input = scanner.nextLine().split("");
            for (int j = 0; j < n; j++) {
                String currentSymbol = input[j];
                matrix[i][j] = currentSymbol;
                if(currentSymbol.equals("S")){
                    row = i;
                    col = j;
                }
            }
        }

        while (sum <= 50){
            String command = scanner.nextLine();
            matrix[row][col] = "-";
            move(matrix, command);
            if(outOfMatrix){
                System.out.println("Bad news! You are out of the pastry shop.");
                break;
            }
            if(matrix[row][col].equals("P")){
                matrix[row][col] = "-";
                pillarPosition = findPillar(matrix);
                matrix[pillarPosition[0]][pillarPosition[1]] = "S";
                row = pillarPosition[0];
                col = pillarPosition[1];
            }else if(matrix[row][col].matches("[0-9]")){
                int price = Integer.parseInt(matrix[row][col]);
                sum += price;
                matrix[row][col] = "S";
            }else if(matrix[row][col].equals("-")){
                matrix[row][col] = "S";
            }
            if(sum >= 50){
                System.out.println("Good news! You succeeded in collecting enough money!");
                break;
            }

        }
        System.out.println("Money: " + sum);
        printMatrix(matrix);

    }
    public static void printMatrix(String[][]matrix){
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix.length; j++) {
                System.out.print(matrix[i][j]);
            }
            System.out.println();
        }
    }
    private static void move(String [][] matrix, String command){
        int n = matrix.length - 1;
        switch (command){
            case "up":
                if(row != 0){
                    row--;
                }else {
                   outOfMatrix = true;
                }
                break;
            case "down":
                if(row != n){
                    row++;
                }else{
                    outOfMatrix = true;
                }
                break;
            case "right":
                if(col != n){
                    col++;
                }else {
                    outOfMatrix = true;
                }
                break;
            case "left":
                if(col != 0){
                    col--;
                }else{
                    outOfMatrix = true;
                }
                break;
        }
    }

     private static int [] findPillar(String[][]matrix){
        int [] pillarPosition = new int[2];
         for (int row = 0; row < matrix.length; row++) {
             for (int col = 0; col < matrix[row].length; col++) {
                 if(matrix[row][col].equals("P")){
                     pillarPosition[0] = row;
                     pillarPosition[1] = col;
                 }
             }
         }
         return pillarPosition;
     }
    }
