import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Scanner;
import java.util.stream.Collectors;

public class OSPlanning01 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);



        ArrayDeque<Integer> tasks = new ArrayDeque<>();
        Arrays.stream(scanner.nextLine().split(", "))
                .map(Integer::parseInt)
                .forEach(tasks::push);
        ArrayDeque<Integer>threads = Arrays.stream(scanner.nextLine().split(" "))
                .map(Integer::parseInt)
                .collect(Collectors.toCollection(ArrayDeque::new));

        int taskToBeKilled = Integer.parseInt(scanner.nextLine());
        int threadKilledValue = 0;

        while (true){
            int currentTask = tasks.peek();
            int currentThread = threads.peek();
            if(currentTask == taskToBeKilled){
                threadKilledValue = currentThread;
                break;
            }
            if(currentThread >= currentTask){
                tasks.pop();
                threads.poll();
            }else{
                threads.poll();
            }

        }
        System.out.printf("Thread with value %d killed task %d%n",threadKilledValue, taskToBeKilled);
        StringBuilder sb = new StringBuilder();
        for (Integer thread : threads) {
            System.out.print(thread + " ");
        }
    }
}
