import java.util.*;
import java.util.stream.Collectors;

public class PastryShop01 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        ArrayDeque<Integer> liquids = Arrays.stream(scanner.nextLine().split(" "))
                .map(Integer::parseInt)
                .collect(Collectors.toCollection(ArrayDeque::new));
        ArrayDeque<Integer> ingredient = new ArrayDeque<>();
        Arrays.stream(scanner.nextLine().split(" "))
                .map(Integer::parseInt)
                .forEach(ingredient::push);

        Map<String, Integer> cookedFoods = new LinkedHashMap<>();
        cookedFoods.put("Biscuit", 0);
        cookedFoods.put("Cake", 0);
        cookedFoods.put("Pie", 0);
        cookedFoods.put("Pastry", 0);
        int sum = 0;

        while (!liquids.isEmpty() && !ingredient.isEmpty()){
            int lastIngredient = ingredient.poll();
            sum = liquids.pop() + lastIngredient;
            String cookFood = null;
            switch (sum){
                case 25:
                    cookFood = "Biscuit";
                    break;
                case 50:
                    cookFood = "Cake";
                    break;
                case 75:
                    cookFood = "Pastry";
                    break;
                case 100:
                    cookFood = "Pie";
                    break;
            }
            if (cookFood != null){
                int newValue = cookedFoods.get(cookFood) + 1;
                cookedFoods.put(cookFood, newValue);
            }else{
                ingredient.push(lastIngredient + 3);
            }
        }
        boolean allFoodCooked = cookedFoods.entrySet().stream().allMatch(el ->el.getValue() > 0);

        if(allFoodCooked){
            System.out.println("Great! You succeeded in cooking all the food!");
        }else{
            System.out.println("What a pity! You didn't have enough materials to cook everything.");
        }
        String leftLiquids = liquids.isEmpty() ? "none" : liquids.stream()
                .map(String :: valueOf)
                .collect(Collectors.joining(", "));
        System.out.println("Liquids left: " + leftLiquids);
        String leftIngredients = ingredient.isEmpty() ? "none" : ingredient.stream()
                .map(String::valueOf)
                .collect(Collectors.joining(", "));
        System.out.println("Ingredients left: " + leftIngredients);

        cookedFoods.entrySet().forEach(e -> System.out.println(e.getKey() + ": " + e.getValue()));

    }
}
