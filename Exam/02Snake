import java.util.Scanner;

public class Snake02 {
    private  static int row = 0;
    private  static int col = 0;
    private  static int foodQuantity = 0;
    private static boolean outOfMatrix = false;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int n = Integer.parseInt(scanner.nextLine());
        String [][] matrix = new String[n][n];
        int [] burrowPosition = new int[2];

        //fill matrix
        for (int i = 0; i < n; i++) {
            String [] input = scanner.nextLine().split("");
            for (int j = 0; j < n; j++) {
                String currentSymbol = input[j];
                matrix[i][j] = currentSymbol;
                if(currentSymbol.equals("S")){
                    row = i;
                    col = j;
                }
            }
        }

        while (foodQuantity < 10){
            String command = scanner.nextLine();
            matrix[row][col] = ".";
            move(matrix, command);
            if(outOfMatrix){
                matrix[row][col] = ".";
                System.out.println("Game over!");
                break;
            }

            if (matrix[row][col].equals("B")){
                matrix[row][col] = ".";
                burrowPosition  = findBurrow(matrix);
                matrix[burrowPosition[0]][burrowPosition[1]] = "S";
                row = burrowPosition[0];
                col = burrowPosition[1];
            }else if(matrix[row][col].equals("*")){
               foodQuantity++;
               matrix[row][col] = "S";
            }else if(matrix[row][col].equals("-")){
                matrix[row][col] = "S";
            }
        }

        if(foodQuantity >= 10){
            System.out.println("You won! You fed the snake.");
        }
        System.out.printf("Food eaten: %d%n", foodQuantity);
        printMatrix(matrix);

    }
    private static void move(String [][] matrix, String command){
        int n = matrix.length - 1;
        switch (command){
            case "up":
                if(row != 0){
                    row--;
                }else {
                    outOfMatrix = true;
                }
                break;
            case "down":
                if(row != n){
                    row++;
                }else{
                    outOfMatrix = true;
                }
                break;
            case "right":
                if(col != n){
                    col++;
                }else {
                    outOfMatrix = true;
                }
                break;
            case "left":
                if(col != 0){
                    col--;
                }else{
                    outOfMatrix = true;
                }
                break;
        }
    }

    private static int [] findBurrow(String[][]matrix){
        int [] burrowPosition = new int[2];
        for (int row = 0; row < matrix.length; row++) {
            for (int col = 0; col < matrix[row].length; col++) {
                if(matrix[row][col].equals("B")){
                    burrowPosition[0] = row;
                    burrowPosition[1] = col;
                }
            }
        }
        return burrowPosition;
    }

    public static void printMatrix(String[][]matrix){
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix.length; j++) {
                System.out.print(matrix[i][j]);
            }
            System.out.println();
        }
    }
}
